{"version":3,"sources":["components/Page.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Page","_ref","section","react_default","a","createElement","className","Home","_useState","useState","_useState2","Object","slicedToArray","handleSection","_useState3","_useState4","language","handleLanguage","onClick","href","target","style","textDecoration","components_Page","App","components_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA+CeA,MA7Cf,SAAAC,GAAwB,IAATC,EAASD,EAATC,QAkCb,MAAgB,UAAZA,EA/BAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,iMACAF,EAAAC,EAAAC,cAAA,iSACAF,EAAAC,EAAAC,cAAA,0QA6BiB,WAAZH,EAtBPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAwBI,eAAZJ,EAhBPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAkBI,YAAZJ,EAXPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAWZ,GCGMC,MA1Cf,WAAe,IAAAC,EACoBC,mBAAS,SAD7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNN,EADMQ,EAAA,GACGG,EADHH,EAAA,GAAAI,EAEsBL,mBAAS,MAF/BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAENE,EAFMD,EAAA,GAEIE,EAFJF,EAAA,GAIb,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,yCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMY,QAAS,kBAAMD,EAAe,QAAOd,EAAAC,EAAAC,cAAA,KAAGC,UAAsB,OAAXU,EAAkB,SAAW,IAA3C,iBAC1Db,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMY,QAAS,kBAAMD,EAAe,QAAOd,EAAAC,EAAAC,cAAA,KAAGC,UAAsB,OAAXU,EAAkB,SAAW,IAA3C,kBAE5Db,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIa,QAAS,kBAAKL,EAAc,WAAhC,SACAV,EAAAC,EAAAC,cAAA,MAAIa,QAAS,kBAAKL,EAAc,YAAhC,UACAV,EAAAC,EAAAC,cAAA,MAAIa,QAAS,kBAAKL,EAAc,gBAAhC,cACAV,EAAAC,EAAAC,cAAA,MAAIa,QAAS,kBAAKL,EAAc,aAAhC,YAEFV,EAAAC,EAAAC,cAAA,KAAGc,KAAK,wBAAwBC,OAAO,SAASC,MAAO,CAAEC,eAAgB,SACvEnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAInBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACkB,EAAD,CAAMrB,QAASA,QCvBVsB,MANf,WACE,OACErB,EAAAC,EAAAC,cAACoB,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7a307c75.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Page({section}){\n  const renderAbout = () => {\n    return (\n      <div className=\"about\">\n        <p>嗨，我是婉瑄。</p>\n        <p>今年剛從中央大學數學系畢業，喜歡數學、喜歡程式、更喜歡學習。</p>\n        <p>在職場上，我希望能與公司和同事一起進步，不懂的東西就是我能學習的事情，不侷限於我在什麼位置。</p>\n        <p>對自己來說，我想成為隨時有想法便能付諸於行動的工程師，是時候該做點能改變世界的事了！</p>\n      </div>\n    )\n  }\n  \n  const renderSkills = () => {\n    return (\n      <div className=\"skills\">\n        \n      </div>\n    )\n  }\n\n  const renderExperience = () => {\n    return (\n      <div className=\"experience\">\n      </div>\n    )\n  }\n\n  const renderContact = () => {\n    return (\n      <div className=\"contact\">\n      </div>\n    )\n  }\n\n  if (section === 'About') {\n    return renderAbout()\n  } else if (section === 'Skills') {\n    return renderSkills()\n  } else if (section === 'Experience') {\n    return renderExperience()\n  } else if (section === 'Contact') {\n    return renderContact()\n  }\n\n}\nexport default Page","import React , { useState } from 'react';\nimport Page from './Page'\n\nfunction Home(){\n  const [section, handleSection] = useState('About');\n  const [language, handleLanguage] = useState('tw');\n\n  return (\n    <div className=\"home\">\n      <div className=\"header\">\n        <p>I'm Bonnie Hsu.</p>\n        <strong>A Front-End Developer.</strong>\n      </div>\n      <div className=\"switcher\">\n        <div className=\"btn\" onClick={() => handleLanguage('en')}><p className={language==='en' ? 'choose' : ''}>ＥＮ</p></div>\n        <div className=\"btn\" onClick={() => handleLanguage('tw')}><p className={language==='tw' ? 'choose' : ''}>台灣</p></div>\n      </div>\n      <div className=\"content\">\n        <div className=\"content-left\">\n          <div className=\"items\">\n            <li onClick={()=> handleSection('About')}>ABOUT</li>\n            <li onClick={()=> handleSection('Skills')}>SKILLS</li>\n            <li onClick={()=> handleSection('Experience')}>EXPERIENCE</li>\n            <li onClick={()=> handleSection('Contact')}>CONTACT</li>\n          </div>\n          <a href='Resume-Bonnie_Hsu.pdf' target='_blank' style={{ textDecoration: 'none'}}>\n            <button className=\"go-resume\">\n              <strong>SEE MY RESUME</strong>\n              <i className=\"fas fa-arrow-right\" />\n            </button>\n          </a>\n        </div>\n        <div className=\"content-right\">\n          <Page section={section}/> \n        </div>\n        \n      </div>\n      \n      \n\n\n    </div>\n  )\n    \n}\nexport default Home","import React from 'react';\n// import logo from './logo.svg';\nimport './css/App.scss';\nimport Home from './components/Home';\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}